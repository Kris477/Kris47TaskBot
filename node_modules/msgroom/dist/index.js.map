{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,gFAAkC;AAGlC,+BAA8C;AAC9C,6BAAmD;AACnD,kFAAgD;AAEhD,6CAA2C;AAS3C,qCAA0F;AAC1F,mDAAqI;AACrI,+DAAwE;AACxE,wEAAwC;AAExC,MAAM,MAAO,SAAS,0BAAgE;IAClF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;IAChB,MAAM,CAAiB;IAC/B,KAAK,CAAS;IACd,OAAO,CAAS;IAEhB,WAAW,CAAU;IACrB,UAAU,CAAS;IACnB,SAAS,CAAU;IACnB,cAAc,CAAS;IACvB,MAAM,CAAU;IAEhB,QAAQ,CAAc;IACtB,UAAU,CAAS;IAEnB,KAAK,GAAyB,EAAE,CAAC;IACjC,GAAG,CAAU;IACb,UAAU,CAAU;IACpB,UAAU,GAAG,IAAI,GAAG,EAAU,CAAC;IAC/B,iBAAiB,GAAG,IAAI,GAAG,EAAU,CAAC;IAEtC,QAAQ,GAAe,EAAE,CAAC;IAC1B,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;IAEjC;;;;;;;;;;;;OAYG;IACH,YACI,IAAY,EACZ,kBAAqC,EAAE,EACvC,UAQI,EAAE;QAEN,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAElB,MAAM,oBAAoB,GAAG,OAAO,eAAe,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAE,eAAe,CAAE,CAAC,CAAC,CAAC,eAAe,CAAC;QACxG,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAE9C,wEAAwE;QACxE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,IAAI,6BAA6B,CAAC;QAC/D,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,KAAK,CAAC;QAChD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAC3C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAE7B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC;QAC3C,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,IAAI,CAAC,SAAS;YAAE,IAAI,CAAC,cAAc,GAAG,iBAAiB,IAAI,UAAU,IAAI,CAAC,UAAU,8BAA8B,CAAC;;YAC7I,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,EAAE,CAAC;QAExD,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAA,qBAAW,EAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACT,OAAO,IAAI,OAAO,CAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1C,IAAI,MAAc,CAAC;YAEnB,IAAI,CAAC,MAAM,GAAG,IAAA,0BAAE,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/B,IAAI,CAAC,MAAM,CAAC,iDAAiD;gBAE7D,kCAAkC;iBAC7B,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBAChB,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,wBAAe,EAAE,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;oBACrB,IAAI,EAAI,IAAI,CAAC,KAAK;oBAClB,MAAM,EAAE,IAAI,CAAC,MAAM;iBACtB,CAAC,CAAC;YACP,CAAC,CAAC;iBACD,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;gBACnB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC9B,CAAC,CAAC;iBACD,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;gBACtB,MAAM,IAAI,wBAAe,EAAE,CAAC;YAChC,CAAC,CAAC;iBACD,EAAE,CAAC,eAAe,EAAE,mBAAmB,CAAC,EAAE;gBACvC,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,wBAAe,EAAE,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3B,MAAM,GAAG,mBAAmB,CAAC;YACjC,CAAC,CAAC;iBACD,EAAE,CAAC,YAAY,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;gBAC7B,MAAM,CAAC,IAAI,kBAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC;iBACD,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;gBAClB,KAAK;qBACA,GAAG,CAAC,0BAAa,CAAC;qBAClB,OAAO,CAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC;gBAEzD,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC;gBAClB,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;YACP,YAAY;QAChB,CAAC,CAAC,CAAC,IAAI,CAAE,GAAG,EAAE,CAAC,IAAI,OAAO,CAAQ,OAAO,CAAC,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,cAAc;gBAAE,OAAO,EAAE,CAAC;YAEpC,MAAM,gBAAgB,GAAG,CAAC,UAAsB,EAAE,EAAE;gBAChD,MAAM,OAAO,GAAG,IAAA,6BAAgB,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzD,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC;oBAAE,OAAO;gBAEtF,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC3C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAE5C,oEAAoE;gBACpE,IAAI,CAAC,MAAO,CAAC,GAAG,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;gBAC9C,OAAO,EAAE,CAAC;YACd,CAAC,CAAC;YAEF,oEAAoE;YACpE,IAAI,CAAC,MAAO,CAAC,EAAE,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;YAE7C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC,IAAI,CAAE,GAAG,EAAE;YACX,oEAAoE;YACpE,IAAI,CAAC,MAAO;gBAEZ,qBAAqB;iBAChB,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACnB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAChC,CAAC,CAAC;iBACD,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE;gBACxB,MAAM,OAAO,GAAG,IAAA,6BAAgB,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzD,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC;oBAAE,OAAO;gBAE3C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC9B,KAAK,IAAI,CAAC,eAAe,CAAC;oBACtB,OAAO;oBACP,IAAI,EAAG,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;oBAClD,KAAK,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,GAAG,IAAI,CAAC;iBACpF,CAAC,CAAC;YACP,CAAC,CAAC;iBACD,EAAE,CAAC,aAAa,EAAE,aAAa,CAAC,EAAE;gBAC/B,MAAM,UAAU,GAAG,IAAA,gCAAmB,EAAC,aAAa,CAAC,CAAC;gBACtD,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;gBACrC,6EAA6E;gBAC7E,IAAI,CAAC,IAAI,CAAC,eAAe,UAAU,CAAC,IAAI,EAAE,EAAE,UAAU,CAAC,CAAC;YAC5D,CAAC,CAAC;iBACD,EAAE,CAAC,cAAc,EAAE,iBAAiB,CAAC,EAAE;gBACpC,MAAM,cAAc,GAAG,IAAA,oCAAuB,EAAC,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9E,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAEhD,cAAc,CAAC,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,WAAW,CAAC;gBAE1D,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;YAC7C,CAAC,CAAC;iBACD,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC,EAAE;gBACvB,MAAM,IAAI,GAAG,IAAA,0BAAa,EAAC,OAAO,CAAC,CAAC;gBACpC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAEjC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;gBAClC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YACjC,CAAC,CAAC;iBACD,EAAE,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE;gBAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAClD,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAEjC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBAC9B,gEAAgE;gBAChE,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAChD,CAAC,CAAC;iBACD,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE;gBAChC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC7C,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAEjC,QAAQ,cAAc,CAAC,IAAI,EAAE;oBACzB,KAAK,SAAS;wBACV,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ;4BAAE,OAAO;wBAEpE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC;4BAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;wBAElF,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;4BACjB,IAAI;4BACJ,MAAM,EAAO,cAAc,CAAC,GAAG;4BAC/B,WAAW,EAAE,cAAc,CAAC,QAAQ;yBACvC,CAAC,CAAC;iBACV;YACL,CAAC,CAAC,CAAC;YACP,YAAY;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gBAAgB,CAAC,IAAY;QACzB,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAChF,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IACpF,CAAC;IAED,UAAU;QACN,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,CAAC;IAC9B,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,IAAI,IAAI,CAAC,IAAY;QACjB,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,0BAAiB,EAAE,CAAC;QAChD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAE5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,EAAE;QACF,IAAI,CAAC,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,0BAAiB,EAAE,CAAC;QAC7C,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED,IAAI,SAAS;QACT,IAAI,CAAC,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,0BAAiB,EAAE,CAAC;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,WAAW,CAAC,GAAG,QAAkB;QAC7B,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,0BAAiB,EAAE,CAAC;QAEhD,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,EAAE;YACvB,IAAI,IAAI,CAAC,WAAW;gBAAE,OAAO,CAAC,IAAI,CAAC,wEAAwE,EAAE,OAAO,CAAC,CAAC;YACtH,OAAO,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;SACvD;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE;YACxB,IAAI,EAAK,MAAM;YACf,OAAO,EAAE,OAAO;SACnB,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,GAAG,IAAc;QACzB,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,0BAAiB,EAAE,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,mBAA6B;QAC1C,OAAO,IAAI,OAAO,CAAE,OAAO,CAAC,EAAE;YAC1B,IAAI,IAAI,GAAG,KAAK,CAAC;YACjB,SAAS,WAAW,CAAC,OAAgB,EAAE,WAAqB;gBACxD,IAAI,CAAC,IAAA,2BAAe,EAChB,mBAAmB,CAAC,GAAG,CAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAE,EAC7D,WAAW,CAAC,GAAG,CAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAE,CACxD;oBAAE,OAAO,KAAK,CAAC;gBAEhB,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBACvE,MAAM,eAAe,GAAG;oBACpB,GAAG,OAAO;oBACV,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;iBAC9B,CAAC;gBAEF,IAAI,GAAG,IAAI,CAAC;gBACZ,OAAO,CAAC,CAAE,eAAe,EAAE,gBAAgB,CAAE,CAAC,CAAC;gBAC/C,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,MAAM,YAAY,GAAG,CAAC,OAA0B,EAAE,WAAqB,EAAQ,EAAE;gBAC7E,IAAI,IAAI;oBAAE,OAAO;gBACjB,IAAI,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;oBAAE,OAAO;gBAE9C,KAAK,MAAM,KAAK,IAAI,OAAO,CAAC,OAAO,EAAE;oBACjC,IAAI,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC;wBAAE,OAAO;iBAC3C;YACL,CAAC,CAAC;YAEF,MAAM,QAAQ,GAA4D,EAAE,CAAC;YAC7E,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,EAAE;gBAC1D,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACtE,QAAQ,CAAC,OAAO,CAAE,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,KAAK,YAAY,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;YAEzF,OAAO,CAAC,SAAS,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAAwB,EAAE,uBAAiC,EAAE,OAAuB;QACjG,IAAI;YACA,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,uBAAuB,CAAC,CAAC;YAEjF,IAAI,CAAC,aAAa;gBAAE,OAAO;YAC3B,IAAI,OAAO,aAAa,IAAI,QAAQ;gBAAE,OAAO,KAAK,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC9E,OAAO,KAAK,OAAO,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;SAE9C;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,CAAC,IAAI,CAAC,qCAAqC,OAAO,CAAC,IAAI,MAAM,KAAe,GAAG,CAAC,CAAC;YAExF,IAAI,IAAI,CAAC,WAAW;gBAAE,OAAO,CAAC,KAAK,CAAC;uBACzB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE;WAC3C,OAAO,CAAC,OAAO,CAAC,OAAO;QAC1B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ;aAC1B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;qBACjB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS;;CAEpD,EAAE,KAAK,CAAC,CAAC;SACD;IACL,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,OAAuB;QACzC,IAAI,CAAC,IAAI,CAAC,UAAU;YAAE,OAAO;QAC7B,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;QAExC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,6CAA6C;QAC3H,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;YAAE,OAAO;QAEjC,MAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE9D,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QACnE,IAAI,CAAC,mBAAmB;YAAE,OAAO,KAAK,OAAO,CAAC,IAAI,CAAC,mCAAmC,IAAI,CAAC,UAAU,8BAA8B,CAAC,CAAC;QAErI,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,mBAAmB,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAED,gBAAgB,CACZ,YAAkC,EAClC,YAA0B,EAC1B,cAAwB,EAAE;QAE1B,IAAI,UAAsB,CAAC;QAC3B,IAAI,OAAO,YAAY,CAAC,OAAO,IAAI,UAAU,EAAE;YAC3C,MAAM,OAAO,GAAG,IAAA,6BAAgB,EAAC,YAAuB,CAAC,CAAC;YAC1D,IAAI,WAAW,CAAC,MAAM,IAAI,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;YACxF,YAAY,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YACnC,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC;SACpC;;YAAM,UAAU,GAAG,YAA0B,CAAC;QAE/C,KAAK,MAAM,OAAO,IAAI,UAAU,EAAE;YAC9B,IAAI,CAAC,gBAAgB,CACjB,UAAU,CAAC,OAAO,CAAC,EACnB,YAAY,EACZ,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAC9B,CAAC;SACL;IACL,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,IAAkB;QACxC,IAAI,OAAO,IAAI,IAAI,QAAQ;YAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;aACzC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAAE,IAAI,GAAG,IAAA,mBAAa,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC;QAEjG,IAAI,iBAAiB,CAAC;QACtB,IAAI;YACA,MAAM,WAAW,GAAG,MAAM,IAAA,gCAAa,EAAqB,IAAI,CAAC,CAAC;YAClE,iBAAiB,GAAG,WAAW,CAAC,OAAO,CAAC;SAC3C;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,mCAAmC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;YAChE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC5B,OAAO;SACV;QAED,IAAI,OAAO,iBAAiB,IAAI,UAAU;YAAE,iBAAiB,GAAG,iBAAiB,EAAE,OAAO,CAAC;QAE3F,IAAI,CAAC,iBAAiB,EAAE;YACpB,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CACnB,GAAG,IAAI;;;;;2JAKoI,CAC9I,CAAC,CAAC;YACH,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC5B,OAAO;SACV;QAED,IAAI,gBAAgB,CAAC;QACrB,IAAI;YACA,gBAAgB,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,CAAC;SACpD;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,mCAAmC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;YAChE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC5B,OAAO;SACV;QAED,IAAI,CAAC,gBAAgB;YAAE,OAAO;QAC9B,IAAI,OAAO,gBAAgB,CAAC,OAAO,IAAI,UAAU,EAAE;YAC/C,MAAM,OAAO,GAAG,gBAAmC,CAAC;YAEpD,IAAI;gBACA,IAAI,CAAC,OAAO,CAAC,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;aACnF;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,6BAA6B,EAAE,KAAK,CAAC,CAAC;gBAC3D,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC5B,OAAO;aACV;YAED,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;YACtC,mDAAmD;YACnD,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;YACxC,OAAO;SACV;QAED,MAAM,UAAU,GAAG,gBAA8B,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,SAAwB;QACnD,IAAI,CAAC,SAAS,EAAE;YACZ,IAAI,CAAC,OAAO,CAAC,IAAI;gBAAE,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;YACnG,SAAS,GAAG,IAAA,cAAW,EAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;SAC5D;QACD,IAAI,OAAO,SAAS,IAAI,QAAQ;YAAE,SAAS,GAAG,IAAA,mBAAa,EAAC,SAAS,CAAC,CAAC;QAEvE,MAAM,KAAK,GAAG,MAAM,IAAA,gCAAa,EAAC,SAAS,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,KAAK;aAChB,MAAM,CAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC1C,GAAG,CAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEvD,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAIM,SAAS,CACZ,cAA6D,EAC7D,aAAsB;QAEtB,IAAI,OAAO,GAAG,KAAK,CAAC;QAEpB,IAAI,OAAO,cAAc,IAAI,QAAQ;YAAE,OAAO,KAAK,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;aAClF,IAAI,CAAC,CAAC,OAAO,cAAc,IAAI,WAAW,CAAC;YAAE,OAAO,KAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,GAAG,cAAc,CAAC,EAAE,CAAC;mBAC3C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;QAE1H,IAAI,OAAO,aAAa,IAAI,QAAQ;YAAE,OAAO,KAAK,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAE5F,OAAO,OAAO,CAAC;IACnB,CAAC;;AAGL,iBAAS,MAAM,CAAC","sourcesContent":["import io from \"socket.io-client\";\nimport MsgroomSocket, { RawMessage } from \"./types/socket.io\";\n\nimport { resolve as pathResolve } from \"path\";\nimport { fileURLToPath, pathToFileURL } from \"url\";\nimport arrayStartsWith from \"array-starts-with\";\n\nimport { EventEmitter } from \"node:events\";\nimport TypedEmitter from \"typed-emitter\";\n\nimport ClientEvents, { User } from \"./types/events\";\nimport {\n    CommandMap, CommandContext, CommandFileExports, CommandWithName,\n    Command, WalkFunction, NormalizedCommand,\n} from \"./types/types\";\n\nimport { AuthError, ConnectionError, ImpossibleError, NotConnectedError } from \"./errors\";\nimport { normalizeCommand, transformMessage, transformNickChangeInfo, transformSysMessage, transformUser } from \"./utils/transforms\";\nimport { walkDirectory, dynamicImport } from \"./utils/compilerFighting\";\nimport helpCommand from \"./helpCommand\";\n\nclass Client extends (EventEmitter as unknown as new () => TypedEmitter<ClientEvents>) {\n    static default = Client;\n    private socket?: MsgroomSocket;\n    #name: string;\n    #server: string;\n\n    printErrors: boolean;\n    helpSuffix: string;\n    blockSelf: boolean;\n    welcomeMessage: string;\n    apikey?: string;\n    \n    prefixes: Set<string>;\n    mainPrefix: string;\n\n    users: Record<string, User> = {};\n    #ID?: string;\n    #sessionID?: string;\n    blockedIDs = new Set<string>();\n    blockedSessionIDs = new Set<string>();\n\n    commands: CommandMap = {};\n    erroredFiles = new Set<string>();\n\n    /**\n     * Creates a new msgroom client.\n     * @param name The username to use.\n     * @param commandPrefixes List of prefixes to be used for commands. Do note these *will be pasted directly in a regular expression*, so **make sure to escape any special characters!** Set this to an empty string to disable the command system.\n     * @param options Extra options.\n     * @param options.server The server to connect to.\n     * @param options.printErrors Whether to print errors to the console.\n     * @param options.helpSuffix A suffix to add to the output of the help command.\n     * @param options.blockSelf Whether the bot should block itself. Will force welcomeMessage to be sent.\n     * @param options.welcomeMessage A message to send when the bot joins.\n     * @param options.mainPrefix The main prefix to use in commands (for example, the help command will use this to tell the user what prefix they should use). This shouldn't have regex in it. Set this to an empty string to disable the command system.\n     * @param options.apikey You can request one from ctrlz.\n     */\n    constructor(\n        name: string,\n        commandPrefixes: string | string[] = [],\n        options: {\n            server?: string,\n            printErrors?: boolean,\n            helpSuffix?: string,\n            blockSelf?: boolean,\n            welcomeMessage?: string,\n            mainPrefix?: string,\n            apikey?: string\n        } = {},\n    ) {\n        super();\n\n        this.validateNickname(name);\n        this.#name = name;\n\n        const commandPrefixesArray = typeof commandPrefixes == \"string\" ? [ commandPrefixes ] : commandPrefixes;\n        this.mainPrefix = options.mainPrefix ?? commandPrefixesArray[0];\n        this.prefixes = new Set(commandPrefixesArray);\n\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        this.#server = options.server || \"wss://msgroom.windows96.net\";\n        this.printErrors = options.printErrors ?? false;\n        this.helpSuffix = options.helpSuffix ?? \"\";\n        this.apikey = options.apikey;\n\n        this.blockSelf = options.blockSelf ?? true;\n        if (!options.welcomeMessage && this.blockSelf) this.welcomeMessage = `Hi there! I'm ${name}. Send ${this.mainPrefix}help for a list of commands.`;\n        else this.welcomeMessage = options.welcomeMessage ?? \"\";\n\n        this.commands.help = helpCommand(this);\n    }\n\n    /**\n     * Connect to a msgroom server.\n     * @returns A promise which resolves when the connection has successfully been established.\n     */\n    async connect(): Promise<void> {\n        return new Promise<void>( (resolve, reject) => {\n            let userID: string;\n\n            this.socket = io(this.#server);\n            this.socket //! don't remove this line, you'd break the types\n\n            //#region connecting to the server\n                .on(\"connect\", () => {\n                    if (!this.socket) throw new ImpossibleError();\n                    this.socket.emit(\"auth\", {\n                        user  : this.#name,\n                        apikey: this.apikey,\n                    });\n                })\n                .on(\"disconnect\", () => {\n                    this.emit(\"disconnected\");\n                })\n                .on(\"connect_error\", () => {\n                    throw new ConnectionError();\n                })\n                .on(\"auth-complete\", authenticatedUserID => {\n                    if (!this.socket) throw new ImpossibleError();\n                    this.socket.emit(\"online\");\n                    userID = authenticatedUserID;\n                })\n                .on(\"auth-error\", ({ reason }) => {\n                    reject(new AuthError(reason));\n                })\n                .on(\"online\", users => {\n                    users\n                        .map(transformUser)\n                        .forEach( user => this.users[user.sessionID] = user);\n\n                    this.#ID = userID;\n                    resolve();\n                });\n            //#endregion\n        }).then( () => new Promise<void>( resolve => {\n            if (!this.welcomeMessage) resolve();\n\n            const sessionIDHandler = (rawMessage: RawMessage) => {\n                const message = transformMessage(rawMessage, this.users);\n                if (!(message.content == this.welcomeMessage && message.author.ID == this.ID)) return;\n\n                this.#sessionID = message.author.sessionID;\n                this.blockedSessionIDs.add(this.#sessionID);\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.socket!.off(\"message\", sessionIDHandler);\n                resolve();\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.socket!.on(\"message\", sessionIDHandler);\n\n            this.sendMessage(this.welcomeMessage);\n        })).then( () => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.socket!\n\n            //#region main events\n                .on(\"werror\", reason => {\n                    this.emit(\"werror\", reason);\n                })\n                .on(\"message\", rawMessage => {\n                    const message = transformMessage(rawMessage, this.users);\n                    if (this.isBlocked(message.author)) return;\n\n                    this.emit(\"message\", message);\n                    void this.processCommands({\n                        message,\n                        send : (...args) => void this.sendMessage(...args),\n                        reply: (...args) => void this.sendMessage(`@${message.author.nickname}`, ...args),\n                    });\n                })\n                .on(\"sys-message\", rawSysMessage => {\n                    const sysMessage = transformSysMessage(rawSysMessage);\n                    this.emit(\"sys-message\", sysMessage);\n                    //@ts-expect-error Don't worry, it's fine. Think about it, you'll understand.\n                    this.emit(`sys-message-${sysMessage.type}`, sysMessage);\n                })\n                .on(\"nick-changed\", rawNickChangeInfo => {\n                    const nickChangeInfo = transformNickChangeInfo(rawNickChangeInfo, this.users);\n                    if (this.isBlocked(nickChangeInfo.user)) return;\n\n                    nickChangeInfo.user.nickname = nickChangeInfo.newNickname;\n\n                    this.emit(\"nick-change\", nickChangeInfo);\n                })\n                .on(\"user-join\", rawUser => {\n                    const user = transformUser(rawUser);\n                    if (this.isBlocked(user)) return;\n\n                    this.users[user.sessionID] = user;\n                    this.emit(\"user-join\", user);\n                })\n                .on(\"user-leave\", userLeaveInfo => {\n                    const user = this.users[userLeaveInfo.session_id];\n                    if (this.isBlocked(user)) return;\n\n                    this.emit(\"user-leave\", user);\n                    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                    delete this.users[userLeaveInfo.session_id];\n                })\n                .on(\"user-update\", userUpdateInfo => {\n                    const user = this.users[userUpdateInfo.user];\n                    if (this.isBlocked(user)) return;\n\n                    switch (userUpdateInfo.type) {\n                        case \"tag-add\":\n                            if (!userUpdateInfo.tag?.trim() || !userUpdateInfo.tagLabel) return;\n\n                            if (!user.flags.includes(userUpdateInfo.tag)) user.flags.push(userUpdateInfo.tag);\n\n                            this.emit(\"tag-add\", {\n                                user,\n                                newTag     : userUpdateInfo.tag,\n                                newTagLabel: userUpdateInfo.tagLabel,\n                            });\n                    }\n                });\n            //#endregion\n        });\n    }\n\n    validateNickname(name: string) {\n        if (name.length > 18) throw new Error(\"Username is longer than 18 characters.\");\n        if (name.length < 1) throw new Error(\"Username should be 1 character or more.\");\n    }\n\n    disconnect() {\n        this.socket?.disconnect();\n    }\n\n    get server(): string {\n        return this.#server;\n    }\n\n    get name(): string {\n        return this.#name;\n    }\n\n    set name(name: string) {\n        if (!this.socket) throw new NotConnectedError();\n        this.validateNickname(name);\n\n        this.socket.emit(\"change-user\", name);\n    }\n\n    get ID(): string {\n        if (!this.#ID) throw new NotConnectedError();\n        return this.#ID;\n    }\n\n    get sessionID(): string {\n        if (!this.#sessionID) throw new NotConnectedError();\n        return this.#sessionID;\n    }\n\n    sendMessage(...messages: string[]): void {\n        if (!this.socket) throw new NotConnectedError();\n\n        const message = messages.join(\" \");\n        if (message.length > 2048) {\n            if (this.printErrors) console.warn(\"A message was too long and cannot be sent, it will be printed below:\\n\", message);\n            return void this.emit(\"werror\", \"message too long\");\n        }\n\n        this.socket.emit(\"message\", {\n            type   : \"text\",\n            content: message,\n        });\n    }\n\n    /**\n     * We currently have no idea what this could be, apart from what the type must be according to the code of the official msgroom client.\n     * Only msgroom staff know the list of commands.\n     * @param args The arguments to pass to the `admin-action` event.\n     */\n    adminAction(...args: string[]): void {\n        if (!this.socket) throw new NotConnectedError();\n        this.socket.emit(\"admin-action\", { args });\n    }\n\n    async getCommand(commandAndArguments: string[]): Promise<[ CommandWithName, string[] ] | undefined> {\n        return new Promise( resolve => {\n            let done = false;\n            function testCommand(command: Command, fullCommand: string[]): boolean {\n                if (!arrayStartsWith(\n                    commandAndArguments.map( argument => argument.toLowerCase() ),\n                    fullCommand.map( argument => argument.toLowerCase() ),\n                )) return false;\n\n                const commandArguments = commandAndArguments.slice(fullCommand.length);\n                const commandWithName = {\n                    ...command,\n                    name: fullCommand.join(\" \"),\n                };\n\n                done = true;\n                resolve([ commandWithName, commandArguments ]);\n                return true;\n            }\n        \n            const walkFunction = (command: NormalizedCommand, fullCommand: string[]): void => {\n                if (done) return;\n                if (testCommand(command, fullCommand)) return;\n\n                for (const alias of command.aliases) {\n                    if (testCommand(command, alias)) return;\n                }\n            };\n\n            const commands: { command: NormalizedCommand, fullCommand: string[] }[] = [];\n            this.walkCommandOrMap(this.commands, (command, fullCommand) => {\n                commands.push({ command, fullCommand });\n            });\n\n            commands.sort( (a, b) => b.fullCommand.length - a.fullCommand.length);\n            commands.forEach( ({ command, fullCommand }) => void walkFunction(command, fullCommand));\n\n            resolve(undefined);\n        });\n    }\n\n    async runCommand(command: CommandWithName, commandHandlerArguments: string[], context: CommandContext) {\n        try {\n            const commandResult = await command.handler(context, ...commandHandlerArguments);\n\n            if (!commandResult) return;\n            if (typeof commandResult == \"string\") return void context.send(commandResult);\n            return void context.send(...commandResult);\n\n        } catch (error) {\n            context.send(`An error occurred while executing ${command.name}: *${error as string}*`);\n\n            if (this.printErrors) console.error(`\nAn error occurred at ${context.message.date.toString()}.\nMessage: ${context.message.content}\nUser: ${context.message.author.nickname}\nUser's ID: ${context.message.author.ID}\nUser's session ID: ${context.message.author.sessionID}\nFull error:\n`, error);\n        }\n    }\n\n    async processCommands(context: CommandContext) {\n        if (!this.mainPrefix) return;\n        const message = context.message.content;\n\n        const regex = new RegExp(`^(${Array.from(this.prefixes).join(\")|(\")})`, \"i\"); // I checked and we should we safe from ReDoS\n        if (!regex.test(message)) return;\n\n        const parsedArguments = message.replace(regex, \"\").split(\" \");\n\n        const commandAndArguments = await this.getCommand(parsedArguments);\n        if (!commandAndArguments) return void context.send(`That command doesn't exist. Run ${this.mainPrefix}help for a list of commands.`);\n\n        await this.runCommand(...commandAndArguments, context);\n    }\n\n    walkCommandOrMap(\n        commandOrMap: Command | CommandMap,\n        walkFunction: WalkFunction,\n        fullCommand: string[] = [],\n    ): void {\n        let commandMap: CommandMap;\n        if (typeof commandOrMap.handler == \"function\") {\n            const command = normalizeCommand(commandOrMap as Command);\n            if (fullCommand.length == 0) throw new Error(\"Please provide the name of the command!\");\n            walkFunction(command, fullCommand);\n            commandMap = command.subcommands;\n        } else commandMap = commandOrMap as CommandMap;\n\n        for (const command in commandMap) {\n            this.walkCommandOrMap(\n                commandMap[command],\n                walkFunction,\n                fullCommand.concat(command),\n            );\n        }\n    }\n\n    async addCommandsFromFile(file: string | URL): Promise<void> {\n        if (typeof file != \"string\") file = file.href;\n        else if (!file.startsWith(\"file:\") && !file.startsWith(\"data:\")) file = pathToFileURL(file).href;\n\n        let defaultFileExport;\n        try {\n            const fileExports = await dynamicImport<CommandFileExports>(file);\n            defaultFileExport = fileExports.default;\n        } catch (error) {\n            console.error(`An error occurred while loading ${file}`, error);\n            this.erroredFiles.add(file);\n            return;\n        }\n\n        if (typeof defaultFileExport != \"function\") defaultFileExport = defaultFileExport?.default;\n\n        if (!defaultFileExport) {\n            console.error(new Error(\n                `${file} doesn't have a default export. The default export should be a function taking an instance of Client as the only argument and should return (a promise which resolves to) a CommandMapEntry.\n\nIf it returns a Command (any object which has a property named \"handler\" that resolves to a function), it will be registered accordingly to client.commands.\nDo note that if you're returning a Command directly from a function, you also need to provide a property called name to provide the name of your command.\n\nIf it returns any other object, it will be assumed to be a CommandMap and all of its properties will be assigned to client.commands using Object.assign().`,\n            ));\n            this.erroredFiles.add(file);\n            return;\n        }\n\n        let importedCommands;\n        try {\n            importedCommands = await defaultFileExport(this);\n        } catch (error) {\n            console.error(`An error occurred while loading ${file}`, error);\n            this.erroredFiles.add(file);\n            return;\n        }\n\n        if (!importedCommands) return;\n        if (typeof importedCommands.handler == \"function\") {\n            const command = importedCommands as CommandWithName;\n\n            try {\n                if (!command.name) throw new Error(\"You must provide a name for your command!\");\n            } catch (error) {\n                console.error(`${file} has an invalid commandName`, error);\n                this.erroredFiles.add(file);\n                return;\n            }\n\n            this.commands[command.name] = command;\n            //@ts-expect-error Yeah that's why I'm deleting it.\n            delete this.commands[command.name].name;\n            return;\n        }\n\n        const commandMap = importedCommands as CommandMap;\n        Object.assign(this.commands, importedCommands);\n    }\n\n    async addCommandsFromDirectory(directory?: string | URL): Promise<void> {\n        if (!directory) {\n            if (!require.main) throw new Error(\"You cannot leave out the directory argument in this context!\");\n            directory = pathResolve(require.main.path, \"./commands\");\n        }\n        if (typeof directory != \"string\") directory = fileURLToPath(directory);\n\n        const files = await walkDirectory(directory);\n        const modules = files\n            .filter( file => file.name.endsWith(\".js\"))\n            .map( file => this.addCommandsFromFile(file.path));\n\n        await Promise.all(modules);\n    }\n\n    public isBlocked(userID: string, userSessionID?: string): boolean;\n    public isBlocked(userIDOrObject: { ID?: string, sessionID?: string }): boolean;\n    public isBlocked(\n        userIDOrObject?: string | { ID?: string, sessionID?: string },\n        userSessionID?: string,\n    ): boolean {\n        let blocked = false;\n\n        if (typeof userIDOrObject == \"string\") blocked ||= this.blockedIDs.has(userIDOrObject);\n        else if (!(typeof userIDOrObject == \"undefined\")) blocked   ||= this.blockedIDs.has(\"\" + userIDOrObject.ID)\n                                                                    ||  this.blockedSessionIDs.has(\"\" + userIDOrObject.sessionID);\n\n        if (typeof userSessionID == \"string\") blocked ||= this.blockedSessionIDs.has(userSessionID);\n\n        return blocked;\n    }\n}\n\nexport = Client;"]}