{"version":3,"file":"compilerFighting.js","sourceRoot":"","sources":["../../src/utils/compilerFighting.ts"],"names":[],"mappings":";;;AAAA,+BAAiC;AAIjC,IAAI;IACA,8DAA8D;IAC9D,qBAAa,GAAG,QAAQ,CAAC,SAAS,EAAE,WAAW,EAAE,cAAc,CAAC;;;;KAI/D,CAAC,CAAC,OAAO,EAAE,gBAAS,CAA8B,CAAC;CACvD;AAAC,OAAO,KAAK,EAAE;IACZ,4DAA4D;IAC5D,qBAAa,GAAG,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,oDAAoD,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAC5F,CAAC,CAAC;CACL;AAED,gHAAgH;AAChH,8DAA8D;AACjD,QAAA,aAAa,GAAG,QAAQ,CAAC,iBAAiB,EAAE,cAAc,CAAC;;CAEvE,CAA+C,CAAC","sourcesContent":["import { promisify } from \"util\";\nimport type { walk } from \"@nodelib/fs.walk\";\n\nexport let walkDirectory: typeof walk.__promisify__;\ntry {\n    // eslint-disable-next-line @typescript-eslint/no-implied-eval\n    walkDirectory = Function(\"require\", \"promisify\", /*javascript*/ `\n        // try breaking this, rollup\n        const { walk } = require(\"@nodelib/fs.walk\");\n        return promisify(walk);\n    `)(require, promisify) as typeof walk.__promisify__;\n} catch (error) {\n    // eslint-disable-next-line @typescript-eslint/require-await\n    walkDirectory = async () => {\n        throw new Error(\"This feature is not available in this environment!\", { cause: error });\n    };\n}\n\n// get the real dynamic import() function, because the typescript compiler will override it to use require() >:(\n// eslint-disable-next-line @typescript-eslint/no-implied-eval\nexport const dynamicImport = Function(\"importSpecifier\", /*javascript*/ `\n    return import(importSpecifier);\n`) as <T>(importSpecifier: string) => Promise<T>;"]}