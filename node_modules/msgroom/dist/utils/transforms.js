"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimMessage = exports.normalizeCommand = exports.transformSysMessage = exports.transformNickChangeInfo = exports.transformMessage = exports.transformUser = void 0;
const he_1 = require("he");
function transformUser(rawUser) {
    return {
        color: rawUser.color,
        flags: rawUser.flags,
        ID: rawUser.id,
        sessionID: rawUser.session_id,
        nickname: rawUser.user,
    };
}
exports.transformUser = transformUser;
function transformMessage(rawMessage, onlineUsers) {
    return {
        type: rawMessage.type,
        color: rawMessage.color,
        content: (0, he_1.decode)(rawMessage.content),
        date: new Date(rawMessage.date),
        author: onlineUsers[rawMessage.session_id],
    };
}
exports.transformMessage = transformMessage;
function transformNickChangeInfo(rawNickChangeInfo, onlineUsers) {
    return {
        user: onlineUsers[rawNickChangeInfo.session_id],
        oldNickname: rawNickChangeInfo.oldUser,
        newNickname: rawNickChangeInfo.newUser,
    };
}
exports.transformNickChangeInfo = transformNickChangeInfo;
function transformSysMessage(rawSysMessage) {
    return {
        type: rawSysMessage.type,
        message: rawSysMessage.message,
        isHTML: rawSysMessage.isHtml,
    };
}
exports.transformSysMessage = transformSysMessage;
function normalizeCommand(command) {
    return {
        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
        description: command.description || "No description provided.",
        aliases: command.aliases ?? [],
        handler: command.handler,
        subcommands: command.subcommands ?? {},
    };
}
exports.normalizeCommand = normalizeCommand;
function trimMessage(message) {
    return message
        .split("\n")
        .map(line => line.trim())
        .join("\n")
        .trim();
}
exports.trimMessage = trimMessage;
//# sourceMappingURL=transforms.js.map