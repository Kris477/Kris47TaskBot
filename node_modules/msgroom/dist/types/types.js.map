{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Message } from \"./events\";\nimport type Client from \"..\";\n\nexport type LogFunction = (...args: string[]) => void;\n// I need to because typescript is behaving weirdly again\n// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\nexport type CommandHandlerReturnValue = string | string[] | void;\nexport type CommandHandler = (context: CommandContext, ...args: string[]) => (Promise<CommandHandlerReturnValue> | CommandHandlerReturnValue);\nexport interface Command {\n    description?: string;\n    aliases?: string[][]\n    handler: CommandHandler;\n    subcommands?: CommandMap\n}\nexport type NormalizedCommand = Required<Command>;\nexport type CommandMap = Record<string, Command>;\n\nexport type CommandWithName = Command & { name: string };\nexport type ModuleInitializeFunctionReturnType = CommandWithName | CommandMap | undefined | null;\nexport type ModuleInitializeFunction =\n    ( (client: Client) => ModuleInitializeFunctionReturnType ) |\n    ( (client: Client) => Promise<ModuleInitializeFunctionReturnType> );\nexport interface CommandFileExports {\n    default?: ModuleInitializeFunction | { default?: ModuleInitializeFunction }\n}\n\nexport type WalkFunction = (\n    command: NormalizedCommand,\n    fullCommand: string[],\n) => void;\n\nexport interface CommandContext {\n    /** The message that triggered the command */\n    message: Message;\n\n    /** Will send a message. */\n    send: LogFunction;\n\n    /** Like send(), but will tag the user. */\n    reply: LogFunction;\n}"]}